{"version":3,"sources":["icons/delete-icon.js","components/post/post.js","components/spinner/spinner.js","constants/url.js","services/get-posts.service.js","services/delete-post.service.js","services/add-post.service.js","constants/messages.js","store/store.actions.js","pages/posts/post.action.js","pages/posts/posts.js","components/snackbar/snackbar.js","pages/posts/post.reducer.js","store/store.js","App.js","reportWebVitals.js","index.js"],"names":["DeleteActionIcon","Post","postId","postTitle","postUserId","postBody","deleteHandler","Paper","className","elevation","onClick","Spinner","message","CircularProgress","URL","getPosts","a","axios","get","posts","data","deletePost","delete","addPost","postDetails","post","SNACKBAR_SUCCESS","SNACKBAR_ERROR","SNACKBAR_OPEN","GET_POSTS_PENDING","GET_POSTS_SUCCESS","postStatus","type","Posts","postsState","useSelector","state","postreducer","dispatch","useDispatch","useState","setPostTitle","setPostBody","useEffect","severity","deletePostHandler","status","id","onSubmit","event","preventDefault","userId","title","body","document","getElementById","reset","addPostAction","InputLabel","TextField","variant","size","onChange","target","value","postTitleHandler","required","TextareaAutosize","rowsMin","rowsMax","postBodyHandler","Button","color","loading","map","SnackbarComponent","snackbarMessage","snackbarOpen","snackbarSeverity","handleClose","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","Alert","initialState","composeEnhancers","window","compose","store","createStore","combineReducers","payload","applyMiddleware","thunk","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"oRAQeA,EANU,WACrB,OAAQ,+BACR,cAAC,IAAD,OCmBWC,G,MAlBF,SAAC,GAAgE,IAA9DC,EAA6D,EAA7DA,OAAoBC,GAAyC,EAArDC,WAAqD,EAAzCD,WAAWE,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,cACvD,OACE,cAACC,EAAA,EAAD,CAAOC,UAAU,iBAAiBC,UAAW,EAA7C,SACE,sBAAKD,UAAU,OAAf,UACE,sBAAKA,UAAU,QAAf,UACE,6BAAKL,IACL,4BAAIE,OAEN,qBAAKG,UAAU,QAAf,SACE,sBAAME,QAAS,kBAAMJ,EAAcJ,IAAnC,SACE,cAAC,EAAD,e,SCFGS,G,MAVC,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACjB,OACE,sBAAKJ,UAAU,oBAAf,UACE,kCACE,cAACK,EAAA,EAAD,MAEF,kCAAUD,S,0CCTHE,EAAM,6CCENC,EAAQ,uCAAG,4BAAAC,EAAA,sEACFC,IAAMC,IAAIJ,GADR,cAChBK,EADgB,yBAEfA,EAAMC,MAFS,2CAAH,qDCARC,EAAU,uCAAG,WAAOnB,GAAP,eAAAc,EAAA,sEACJC,IAAMK,OAAOR,EAAG,WAAOZ,IADnB,cAClBiB,EADkB,yBAEjBA,GAFiB,2CAAH,sDCCVI,EAAO,uCAAG,WAAOC,GAAP,eAAAR,EAAA,sEACDC,IAAMQ,KAAKX,EAAIU,GADd,cACfL,EADe,yBAEdA,GAFc,2CAAH,sDCKPO,EAAmB,UACnBC,EAAiB,QCTjBC,EAAgB,gBAGhBC,EAAoB,oBACpBC,EAAoB,oBCa3BC,EAAa,SAACC,EAAMZ,GACxB,MAAO,CACLY,OACAZ,KAAMA,I,oCC4EKa,G,OAnFD,WACZ,IAAMC,EAAaC,aAAY,SAACC,GAAD,OAAWA,EAAMC,eAC1CC,EAAWC,cAEjB,EAAkCC,mBAAS,IAA3C,mBAAOrC,EAAP,KAAkBsC,EAAlB,KACA,EAAgCD,mBAAS,IAAzC,mBAAOnC,EAAP,KAAiBqC,EAAjB,KAcAC,qBAAU,WACRL,EDRF,uCAAO,WAAOA,GAAP,eAAAtB,EAAA,sEAEHsB,EAASP,EAAWF,IAFjB,SAGgBd,IAHhB,OAGGK,EAHH,OAIHkB,EAASP,EAAWD,EAAmBV,IAJpC,gDAMHkB,EACEP,EAAWH,EAAe,CACxBhB,QFjCoB,wBEkCpBgC,SAAUjB,KATX,yDAAP,yDCSG,IAEH,IAAMkB,EAAoB,SAAC3C,GACzBoC,EDKF,uCAAO,WAAOA,GAAP,eAAAtB,EAAA,+EAEwBK,IAFxB,UAGyB,MAHzB,OAGcyB,OAHd,wBAIDR,EACEP,EAAWH,EAAe,CACxBhB,QF9CwB,4BE+CxBgC,SAAUlB,KAGdY,EAASP,EAAWF,IAVnB,SAWkBd,IAXlB,OAWKK,EAXL,OAYDkB,EAASP,EAAWD,EAAmBV,IAZtC,0DAeHkB,EACEP,EAAWH,EAAe,CACxBhB,QFxDwB,mBEyDxBgC,SAAUjB,KAlBX,0DAAP,wDCFMR,EAAK,YAAOe,EAAWf,OAC7B,OACE,sBAAKX,UAAU,QAAf,UACE,0BAASA,UAAU,0BAAnB,UACE,8CACA,sBAAMuC,GAAG,gBAAgBvC,UAAU,gBAAgBwC,SAvBxC,SAACC,GAChBA,EAAMC,iBACN,IAAM1B,EAAc,CAClB2B,OAAQ,EACRC,MAAOjD,EACPkD,KAAMhD,GAERiD,SAASC,eAAe,iBAAiBC,QACzClB,EDqCyB,SAACd,GAC5B,8CAAO,WAAOc,GAAP,eAAAtB,EAAA,+EAEyBO,EAAQC,GAFjC,UAG0B,MAH1B,OAGesB,OAHf,wBAIDR,EACEP,EAAWH,EAAe,CACxBhB,QFrEwB,4BEsExBgC,SAAUlB,KAGdY,EAASP,EAAWF,IAVnB,SAWkBd,IAXlB,OAWKK,EAXL,OAYDkB,EAASP,EAAWD,EAAmBV,IAZtC,0DAeHkB,EACEP,EAAWH,EAAe,CACxBhB,QF/EwB,mBEgFxBgC,SAAUjB,KAlBX,0DAAP,sDCtCW8B,CAAcjC,KAenB,SACE,sBAAKhB,UAAU,yBAAf,UACE,cAACkD,EAAA,EAAD,CAAYlD,UAAU,cAAtB,mBACA,cAACmD,EAAA,EAAD,CACEnD,UAAU,cACVoD,QAAQ,WACRC,KAAK,QACL7B,KAAK,OACL8B,SAAU,SAACb,GAAD,OAjCG,SAACA,GAAD,OAAWR,EAAaQ,EAAMc,OAAOC,OAiC7BC,CAAiBhB,IACtCiB,UAAQ,IAEV,cAACR,EAAA,EAAD,CAAYlD,UAAU,cAAtB,kBACA,cAAC2D,EAAA,EAAD,CACE3D,UAAU,cACV4D,QAAS,EACTC,QAAS,GACTP,SAAU,SAACb,GAAD,OAxCE,SAACA,GAAD,OAAWP,EAAYO,EAAMc,OAAOC,OAwC3BM,CAAgBrB,IACrCiB,UAAQ,IAEV,cAACK,EAAA,EAAD,CACEX,QAAQ,YACRpD,UAAU,cACVgE,MAAM,UACNxC,KAAK,SAJP,8BAWN,oCACE,uCACCE,EAAWuC,QACV,cAAC,EAAD,CAAS7D,QAAQ,kBAEjBO,EAAMuD,KAAI,SAACjD,GAAD,OACR,cAAC,EAAD,CAEEvB,OAAQuB,EAAKsB,GACb3C,WAAYqB,EAAK0B,OACjBhD,UAAWsB,EAAK2B,MAChB/C,SAAUoB,EAAK4B,KACf/C,cAAeuC,GALVpB,EAAKsB,e,kBCnDT4B,EA1BW,WACxB,IAAMrC,EAAWC,cACjB,EAA4DJ,aAC1D,SAACC,GAAD,OAAWA,EAAMC,eADXuC,EAAR,EAAQA,gBAAiBC,EAAzB,EAAyBA,aAAcC,EAAvC,EAAuCA,iBAGvC,SAASC,IACPzC,EAAS,CAAEN,KHVe,iBGUOgC,OAAO,IAG1C,OACE,cAACgB,EAAA,EAAD,CACEC,aAAc,CACZC,SAAU,SACVC,WAAY,UAEdC,KAAMP,EACNQ,iBAAkB,IAClBC,QAASP,EAPX,SASE,cAACQ,EAAA,EAAD,CAAO3B,QAAQ,SAAS0B,QAASP,EAAanC,SAAUkC,EAAxD,SACGF,O,wBCzBHY,EAAe,CACnBrE,MAAO,GACPsD,SAAS,EACTI,cAAc,EACdD,gBAAiB,GACjBE,iBAAkB,QCFdW,EACJC,OAAM,sCAA4CC,IAEvCC,EAAQC,YACnBC,YAAgB,CACdzD,YDAW,WAAoC,IAAnCD,EAAkC,uDAA1BoD,EAAcO,EAAY,uCAChD,OAAQA,EAAQ/D,MACd,IAAK,gBACH,OAAO,2BACFI,GADL,IAEEyC,cAAc,EACdD,gBAAiBmB,EAAQ3E,KAAKR,QAC9BkE,iBAAkBiB,EAAQ3E,KAAKwB,WAEnC,IAAK,iBACH,OAAO,2BACAR,GADP,IAEIyC,cAAc,IAEpB,IAAK,oBACH,OAAO,2BACFzC,GADL,IAEEqC,SAAS,IAEb,IAAK,oBACH,OAAO,2BACFrC,GADL,IAEEjB,MAAO4E,EAAQ3E,KACfqD,SAAS,IAEb,QACE,OAAO,eAAKrC,OCxBhBqD,EAAiBO,YAAgBC,O,OCSpBC,MAXf,WACE,OACE,8BACE,eAAC,IAAD,CAAUN,MAAOA,EAAjB,UACE,cAAC,EAAD,IACA,cAAC,EAAD,UCDOO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFxD,SAASC,eAAe,SAM1B4C,K","file":"static/js/main.8109ff7c.chunk.js","sourcesContent":["import DeleteIcon from '@material-ui/icons/Delete';\n\nconst DeleteActionIcon = () => {\n    return (<span>\n    <DeleteIcon />\n  </span>)\n}\n\nexport default DeleteActionIcon;","import React from 'react';\nimport { Paper } from \"@material-ui/core\";\nimport DeleteIcon from \"../../icons/delete-icon\";\nimport \"./post.scss\";\n\nconst Post = ({ postId, postUserId, postTitle, postBody, deleteHandler }) => {\n  return (\n    <Paper className=\"post-container\" elevation={2}>\n      <div className=\"post\">\n        <div className=\"row-1\">\n          <h3>{postTitle}</h3>\n          <p>{postBody}</p>\n        </div>\n        <div className=\"row-2\">\n          <span onClick={() => deleteHandler(postId)}>\n            <DeleteIcon />\n          </span>\n        </div>\n      </div>\n    </Paper>\n  );\n};\n\nexport default Post;\n","import React from 'react';\nimport { CircularProgress } from \"@material-ui/core\";\nimport './spinner.scss';\nconst Spinner = ({ message }) => {\n  return (\n    <div className=\"spinner-container\">\n      <section>\n        <CircularProgress />\n      </section>\n      <section>{message}</section>\n    </div>\n  );\n};\nexport default Spinner;\n","export const URL = \"https://jsonplaceholder.typicode.com/posts\";\n","import axios from \"axios\";\nimport { URL } from \"../constants/url\";\nexport const getPosts = async () => {\n  const posts = await axios.get(URL);\n  return posts.data;\n};\n","import axios from 'axios';\nimport { URL } from '../constants/url';\nexport const deletePost = async (postId) => {\n  const posts = await axios.delete(URL + `/${postId}`);\n  return posts;\n}","import axios from 'axios';\nimport { URL } from '../constants/url';\n\nexport const addPost = async (postDetails) => {\n  const posts = await axios.post(URL,postDetails);\n  return posts;\n}","export const GET_POST_ERROR = 'Could Not Fetch Posts'\n\nexport const POST_DELETED_SUCCESS = 'Post deleted successfully';\nexport const POST_DELETED_ERROR = 'Could Not Delete';\n\nexport const POST_CREATED_SUCCESS = 'Post created successfully';\nexport const POST_CREATED_ERROR = 'Could Not Create';\n\nexport const SNACKBAR_SUCCESS = 'success';\nexport const SNACKBAR_ERROR = 'error'\n\n","export const SNACKBAR_OPEN = \"SNACKBAR_OPEN\";\nexport const SNACKBAR_CLEAR = \"SNACKBAR_CLEAR\";\n\nexport const GET_POSTS_PENDING = \"GET_POSTS_PENDING\";\nexport const GET_POSTS_SUCCESS = \"GET_POSTS_SUCCESS\";\n\n\n","import { getPosts } from \"../../services/get-posts.service\";\nimport { deletePost } from \"../../services/delete-post.service\";\nimport { addPost } from \"../../services/add-post.service\";\nimport {\n  GET_POST_ERROR,\n  POST_CREATED_ERROR,\n  POST_CREATED_SUCCESS,\n  POST_DELETED_ERROR,\n  POST_DELETED_SUCCESS,\n  SNACKBAR_SUCCESS,\n  SNACKBAR_ERROR,\n} from \"../../constants/messages\";\nimport {\n  SNACKBAR_OPEN,\n  GET_POSTS_PENDING,\n  GET_POSTS_SUCCESS\n} from '../../store/store.actions';\nconst postStatus = (type, data) => {\n  return {\n    type,\n    data: data,\n  };\n};\n\nexport const getPostsAction = () => {\n  return async (dispatch) => {\n    try {\n      dispatch(postStatus(GET_POSTS_PENDING));\n      const data = await getPosts();\n      dispatch(postStatus(GET_POSTS_SUCCESS, data));\n    } catch (e) {\n      dispatch(\n        postStatus(SNACKBAR_OPEN, {\n          message: GET_POST_ERROR,\n          severity: SNACKBAR_ERROR,\n        })\n      );\n    }\n  };\n};\n\nexport const deletePostAction = () => {\n  return async (dispatch) => {\n    try {\n      const deleteStatus = await deletePost();\n      if (deleteStatus.status === 200) {\n        dispatch(\n          postStatus(SNACKBAR_OPEN, {\n            message: POST_DELETED_SUCCESS,\n            severity: SNACKBAR_SUCCESS,\n          })\n        );\n        dispatch(postStatus(GET_POSTS_PENDING));\n        const data = await getPosts();\n        dispatch(postStatus(GET_POSTS_SUCCESS, data));\n      }\n    } catch (e) {\n      dispatch(\n        postStatus(SNACKBAR_OPEN, {\n          message: POST_DELETED_ERROR,\n          severity: SNACKBAR_ERROR,\n        })\n      );\n    }\n  };\n};\n\nexport const addPostAction = (postDetails) => {\n  return async (dispatch) => {\n    try {\n      const addPostStatus = await addPost(postDetails);\n      if (addPostStatus.status === 201) {\n        dispatch(\n          postStatus(SNACKBAR_OPEN, {\n            message: POST_CREATED_SUCCESS,\n            severity: SNACKBAR_SUCCESS,\n          })\n        );\n        dispatch(postStatus(GET_POSTS_PENDING));\n        const data = await getPosts();\n        dispatch(postStatus(GET_POSTS_SUCCESS, data));\n      }\n    } catch (e) {\n      dispatch(\n        postStatus(SNACKBAR_OPEN, {\n          message: POST_CREATED_ERROR,\n          severity: SNACKBAR_ERROR,\n        })\n      );\n    }\n  };\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Post from \"../../components/post/post\";\nimport Spinner from \"../../components/spinner/spinner\";\nimport { getPostsAction, deletePostAction, addPostAction } from \"./post.action\";\nimport {\n  TextField,\n  TextareaAutosize,\n  Button,\n  InputLabel,\n} from \"@material-ui/core\";\nimport \"./posts.scss\";\n\nconst Posts = () => {\n  const postsState = useSelector((state) => state.postreducer);\n  const dispatch = useDispatch();\n\n  const [postTitle, setPostTitle] = useState(\"\");\n  const [postBody, setPostBody] = useState(\"\");\n\n  const postTitleHandler = (event) => setPostTitle(event.target.value);\n  const postBodyHandler = (event) => setPostBody(event.target.value);\n  const onSubmit = (event) => {\n    event.preventDefault();\n    const postDetails = {\n      userId: 1,\n      title: postTitle,\n      body: postBody,\n    };\n    document.getElementById(\"new-post-form\").reset();\n    dispatch(addPostAction(postDetails));\n  };\n  useEffect(() => {\n    dispatch(getPostsAction());\n  }, []);\n\n  const deletePostHandler = (postId) => {\n    dispatch(deletePostAction(postId));\n  };\n\n  const posts = [...postsState.posts];\n  return (\n    <div className=\"posts\">\n      <section className=\"new-post-form-container\">\n        <h2>Add New Post</h2>\n        <form id=\"new-post-form\" className=\"new-post-form\" onSubmit={onSubmit}>\n          <div className=\"new-post-form-contents\">\n            <InputLabel className=\"form-labels\">title</InputLabel>\n            <TextField\n              className=\"form-fields\"\n              variant=\"outlined\"\n              size=\"small\"\n              type=\"text\"\n              onChange={(event) => postTitleHandler(event)}\n              required\n            />\n            <InputLabel className=\"form-labels\">body</InputLabel>\n            <TextareaAutosize\n              className=\"form-fields\"\n              rowsMin={5}\n              rowsMax={10}\n              onChange={(event) => postBodyHandler(event)}\n              required\n            />\n            <Button\n              variant=\"contained\"\n              className=\"form-button\"\n              color=\"primary\"\n              type=\"submit\"\n            >\n              Add Post\n            </Button>\n          </div>\n        </form>\n      </section>\n      <section>\n        <h2>Posts</h2>\n        {postsState.loading ? (\n          <Spinner message=\"Loading Posts\" />\n        ) : (\n          posts.map((post) => (\n            <Post\n              key={post.id}\n              postId={post.id}\n              postUserId={post.userId}\n              postTitle={post.title}\n              postBody={post.body}\n              deleteHandler={deletePostHandler}\n            />\n          ))\n        )}\n      </section>\n    </div>\n  );\n};\n\nexport default Posts;\n","import React from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport { SNACKBAR_CLEAR } from \"../../store/store.actions\";\nconst SnackbarComponent = () => {\n  const dispatch = useDispatch();\n  const { snackbarMessage, snackbarOpen, snackbarSeverity } = useSelector(\n    (state) => state.postreducer\n  );\n  function handleClose() {\n    dispatch({ type: SNACKBAR_CLEAR, value: false });\n  }\n\n  return (\n    <Snackbar\n      anchorOrigin={{\n        vertical: \"bottom\",\n        horizontal: \"center\",\n      }}\n      open={snackbarOpen}\n      autoHideDuration={6000}\n      onClose={handleClose}\n    >\n      <Alert variant=\"filled\" onClose={handleClose} severity={snackbarSeverity}>\n        {snackbarMessage}\n      </Alert>\n    </Snackbar>\n  );\n};\n\nexport default SnackbarComponent;\n","const initialState = {\n  posts: [],\n  loading: false,\n  snackbarOpen: false,\n  snackbarMessage: \"\",\n  snackbarSeverity: \"info\",\n};\n\nexport default (state = initialState, payload) => {\n  switch (payload.type) {\n    case \"SNACKBAR_OPEN\":\n      return {\n        ...state,\n        snackbarOpen: true,\n        snackbarMessage: payload.data.message,\n        snackbarSeverity: payload.data.severity,\n      };\n    case \"SNACKBAR_CLEAR\":\n      return {\n          ...state,\n          snackbarOpen: false\n      }\n    case \"GET_POSTS_PENDING\":\n      return {\n        ...state,\n        loading: true,\n      };\n    case \"GET_POSTS_SUCCESS\":\n      return {\n        ...state,\n        posts: payload.data,\n        loading: false\n      };\n    default:\n      return { ...state };\n  }\n};\n","import { combineReducers, createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport PostReducer from \"../pages/posts/post.reducer\";\nconst composeEnhancers =\n  window[\"__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\"] || compose;\n\nexport const store = createStore(\n  combineReducers({\n    postreducer: PostReducer,\n  }),\n  composeEnhancers(applyMiddleware(thunk))\n);\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport Posts from \"./pages/posts/posts\";\nimport SnackBar from \"./components/snackbar/snackbar\";\nimport { store } from \"./store/store\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div>\n      <Provider store={store}>\n        <SnackBar />\n        <Posts />\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}